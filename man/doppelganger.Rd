% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doppelganger.R
\name{doppelganger}
\alias{doppelganger}
\title{Find Doppelgangers}
\usage{
doppelganger(
  data,
  variables = NULL,
  force_keep = NULL,
  priority = c("centrality", "peripherality", "raw_order"),
  threshold = 0.9
)
}
\arguments{
\item{data}{Data table source.}

\item{variables}{Variables included in \code{data} to consider.}

\item{force_keep}{Names of variable to force keep (if there is any).}

\item{priority}{Ranking method to prioritize variables. When "Centrality" is
selected, variables with higher mean absolute correlation will have higher
priority (see details). On the opposite, when "Peripherality" is selected,
the algorithm tries to keep the most peripheral variables, dropping variables
with elevated levels of correlation. "Raw order" prioritize variables using
their position within the vector \code{variables}.}

\item{threshold}{Correlation cut-off (absolute value) to identify doppelgangers.
Variables with absolute correlation values equal or greater to this value will be
considered aliases of each other.}
}
\description{
Analyze correlations to select a subset of non-redundant variables.
}
\details{
The variable priority is established by calculating a centrality index
for each variable and sorting them accordingly. When \code{priority} is "Centrality",
the function sort variables from the most central to the most peripheral.
When \code{priority} is "Peripherality", the function sort variables from the most
peripheral to the most central. The centrality index is calculated as the
weighted mean of the absolute values of its correlations. Weights are obtained
by counting the data used to calculate each correlation. This weighting strategy
is applied in order to prioritize variables with less missing data or where
missing data match missing data of other variables.
}
\examples{
\dontrun{
data(measures)
dg <- doppelganger(measures, threshold=0.7)
var_grp <- list(
    Selected = apply(sapply(dg$keep, "==", dg$variables), 2, which),
     Dropped = apply(sapply(dg$drop, "==", dg$variables), 2, which)
)
qgraph::qgraph(
    dg$cor_matrix, layout="spring", #vsize=2,
    minimum=0.3, edge.labels=TRUE,
    groups=var_grp, colors=c("orange","gray90")
)
}
}
